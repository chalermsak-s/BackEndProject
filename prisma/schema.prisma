// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}
model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      Role[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  admin     Admin?
  teacher   Teacher?
  student   Student?
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  users       User[]
}

model Admin {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  studentId      String   @unique
  firstName      String
  lastName       String
  profileImage   String?
  departmentId   Int
  department     Department @relation(fields: [departmentId], references: [id])
  advisorId      Int?
  advisor        Teacher?  @relation(fields: [advisorId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  comments       Comment[]
  appointments   Appointment[]
}
model Teacher {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  academicTitle   String?
  firstName       String
  lastName        String
  profileImage    String?
  departmentId    Int
  department      Department @relation(fields: [departmentId], references: [id])
  isAdvisor       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  advisedStudents Student[]
  comments        Comment[]
  announcements   Announcement[]
  appointments    Appointment[]
}

model Department {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  teachers    Teacher[]
  students    Student[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  teacherId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  studentId Int
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parentId  Int?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?  @db.Text
  filePath  String?
  teacherId Int
  teacher   Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id            Int               @id @default(autoincrement())
  subject       String
  description   String?           @db.Text
  requestDate   DateTime
  status        AppointmentStatus @default(PENDING)
  studentId     Int
  student       Student           @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacherId     Int
  teacher       Teacher           @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  confirmedDate DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

enum AppointmentStatus {
  PENDING
  PROPOSED
  CONFIRMED
  CANCELED
}